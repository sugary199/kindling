receivers:
  udsreceiver:
    zeromqpull:
      # Address for pulling events from probe
      endpoint: ipc:///home/kindling-sub/0
    zeromqreq:
      # Address for sending subscribe messages to probe
      endpoint: ipc:///home/kindling/0
      subscribe:
        - name: syscall_exit-writev
          category: net
        - name: syscall_exit-readv
          category: net
        - name: syscall_exit-write
          category: net
        - name: syscall_exit-read
          category: net
        - name: syscall_exit-sendto
          category: net
        - name: syscall_exit-recvfrom
          category: net
        - name: syscall_exit-sendmsg
          category: net
        - name: syscall_exit-recvmsg
          category: net
        - name: grpc_uprobe
          category: net
        - name: kprobe-tcp_close
        - name: kprobe-tcp_rcv_established
        - name: kprobe-tcp_drop
        - name: kprobe-tcp_retransmit_skb
analyzers:
  tcpmetricanalyzer:
  uprobeanalyzer:
    response_slow_threshold: 500
  networkanalyzer:
    connect_timeout: 100
    # How many seconds to wait until we consider a request as no response.
    request_timeout: 1
    # How many milliseconds to wait until we consider a request-response as slow.
    response_slow_threshold: 500
    # Whether enable conntrack module to find pod's ip when calling service
    enable_conntrack: true
    conntrack_max_state_size: 131072
    conntrack_rate_limit: 500
    proc_root: /proc
    # The protocol parsers which is enabled
    # When dissectors are enabled, agent will analyze the payload and enrich metric/trace with its content.
    protocol_parser: [ http, mysql, dns, redis, kafka ]
    # http_payload_length indicates the maximum size that HTTP payload can be fetched.
    # The trace data sent may contain such payload, so the higher this value, the larger network traffic.
    http_payload_length: 200
    # If the destination port of data is one of the followings, the protocol of such network request
    # is set to the corresponding one. Note the program will try to identify the protocol automatically
    # for the ports that are not in the lists, in which case the cpu usage will be increased much inevitably.
    protocol_config:
      - key: "mysql"
        ports: [ 3306 ]
        slow_threshold: 100
        disable_discern: false
      - key: "kafka"
        ports: [ 9092 ]
        slow_threshold: 100
      - key: "cassandra"
        ports: [ 9042 ]
        slow_threshold: 100
      - key: "s3"
        ports: [ 9190 ]
        slow_threshold: 100
      - key: "dns"
        ports: [ 53 ]
        slow_threshold: 100

processors:
  k8smetadataprocessor:
    kube_auth_type: serviceAccount
    kube_config_dir: ~/.kube/config
  kindlingformatprocessor:
    need_trace_as_metric: true
    need_pod_detail: true
    store_external_src_ip: true
    # When using otlp-grpc / stdout exporter , this option supports to
    # send trace data in the format of ResourceSpan
    need_trace_as_span: false
    sampling_rate:
      normal_data: 0
      slow_data: 100
      error_data: 100

  nodemetricprocessor:

exporters:
  otelexporter:
    metric_aggregation_map:
      kindling_entity_request_duration_nanoseconds: 2
      kindling_entity_request_send_bytes_total: 1
      kindling_entity_request_receive_bytes_total: 1
      kindling_topology_request_duration_nanoseconds: 2
      kindling_topology_request_request_bytes_total: 1
      kindling_topology_request_response_bytes_total: 1
      kindling_trace_request_duration_nanoseconds: 0
      kindling_tcp_rtt_microseconds: 0
      kindling_tcp_retransmit_total: 1
      kindling_tcp_packet_loss_total: 1
      kindling_node_transmit_bytes_total: 1
    # Export data in the following ways: ["prometheus", "otlp", "stdout"]
    # Note: configure the corresponding section to make everything ok
    export_kind: prometheus
    # Add labels to all metrics in the format of [key: value]
    custom_labels:
    prometheus:
      port: :9500
    otlp:
      collect_period: 15s
      # Note: DO NOT add the prefix "http://"
      endpoint: 10.10.10.10:8080
    stdout:
      collect_period: 15s

observability:
  logger:
    console_level: info # debug,info,warn,error,none
    file_level: info
    file_rotation:
      filename: agent.log
      maxsize: 512 #MB
      maxage: 30 #day
      maxbackups: 5
      localtime: true
      compress: false
  opentelemetry:
    prometheus_port: :9501